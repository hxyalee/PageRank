//COMP 2521 ASS2
// pagerank.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <assert.h>
#include <math.h>

#include "graph.h"
#include "queue.h"
#include "set.h"


#define BUFSIZE 4096

char *normaliseWord (char *str);
char **arrayOfURLs(char *rootFileName, int nV);
int getNumberOfVertices(char *rootFileName) ;


void stage_one () ;

struct node {
    char *name;
    struct node* next;
} Node;


void stage_one () {
    // Open File
    char *rootFileName = "collection.txt";


////////////////////////////////////////////////////////////////////////
    int nV = getNumberOfVertices(rootFileName);
    char **URLs = arrayOfURLs(rootFileName, nV);
////////////////////////////////////////////////////////////////////////

    // Initialise an empty queue and graph
    Graph g = newGraph((size_t)nV);
    Queue q = newQueue();




    
/////////////////////////////////////////////////////////////////////////
    g = generateGraph(g, rootFileName, URL);
    // calculate the weight after graph is constructed


    // make a text file
    // and print as required 
    FILE *output = fopen("pagerankList.txt", "w");
    if (output) {

    }

    return;
}


// Generate a graph with 0 weight according to the 
// edges in the files
Graph generateGraph(Graph g, char* rootFileName, char **URL) {
    
    // Set buffer to perform operations on files
    char inCollection[BUFSIZE];
    char inUrl[BUFSIZE];
    char lineBUF[1000];
 

    int fromURL;
    int toURL;

    collectionFile = fopen(rootFileName, "r");
    if (collectionFile) {
        // read the words in the root file per string
 

        while (fscanf(collectionFile, "%s", inCollection) != EOF) {
            
            char *urlName = strdup(inCollection);
            

            // add ".txt" to the end of the files
            strcat(inCollection, ".txt");    
            
            FILE *urlFile = fopen(inCollection, "r");
            
            if (urlFile) {
                // normalise and then strcmp
                while (strcmp(normaliseWord(fgets(lineBUF, 1000, inUrl)), "#start Section-1")) {}
                // strcmp
                while (strcmp(fscanf(urlFile, "%s", inUrl), "#end")) {
                    int j;
                    for (j = 0; URL[j] != urlName; j ++) {}                    
                    fromURL = j;
                    for (j = 0; URL[j] != inUrl; j ++) {}
                    toURL = j;
                    insertEdge(g, fromURL, toURL);
                }
                fclose(urlFile);
            }

        }
        fclose(collectionFile);
    }    
}

// Creates an array of the vertices;
// which are the URLs in the root File
// Assuming all URL names are different
char **arrayOfURLs(char *rootFileName, int nV) {

   char inCollection[BUFSIZE];


    // Initialise an array of strings to store the name of URLs
    char *url[] = malloc(sizeof(char *) * nV);
    int i = 0;
    // fill the url array with vertices
    collectionFile = fopen(rootFileName, "r");
    if (collectionFile) {
        while (fscanf(collectionFile, "%s", inCollection) != EOF) {
            // url[i] = malloc(sizeof(char) * strlen(inCollection));
            url[i] = strdup(inCollection);
            i ++;
        }
        fclose(collectionFile);
    }    
    return url;
}





// Gets the total number of vertices, which is the 
// total number of fileNames to open
// Assuming all URL names are different
int getNumberOfVertices(char *rootFileName) {
   char inCollection[BUFSIZE];

    FILE *collectionFile = fopen(rootFileName, "r");
    // Initalise the number of vertices to 0 
    // This is needed to initialise the graph
    int nV = 0; 
    // Calculate the total number of vertices in a graph
    if (collectionFile) {
        while (fscanf(collectionFile, "%s", inCollection) != EOF) nV ++;

        fclose(collectionFile);
    }
    return nV;
}




void pageRank (int d, double diffPr, int maxIterations) {

    int iterations = 0;
    if (maxIterations == 0) {
        // PR(p_i, 0) = 1/N;
    }

}









// Normalise the words passed to the function follwoing the required properties
// Assime that the string is already 'malloc'-ed and strCpy-ed
char *normaliseWord (char *str) {
    
    // if empty string
    if (strlen(str) == 0) return str;

    // Remove white spaces in left of the string
    while (isspace(*str)) str ++;
    
    // Remove while spaces on the right of the string
    int c = strlen(str) - 1;
    while (str[c] == ' ') {
        str[c] = '\0' ;
        c--;
    }
     
    // total length of the string
    int len = strlen(str) - 1;
    // if the string ends in special characters
    if (str[len] == '.' || str[len] == ',' ||
        str[len] == ';' || str[len] == '?') {
        str[len] = '\0';
    }
    // change the string to all lowercase
    int i = 0;
    while (str[i] != '\0') {
        str[i] = tolower(str[i]);
        i ++;
    }    
    return str;
}
//////////////////////////////////////////////////////////////////////////////













