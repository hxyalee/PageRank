//COMP 2521 ASS2
// pagerank.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <assert.h>
#include <math.h>

#include "graph.h"
#include "queue.h"
#include "set.h"
#include "pagerank.h"





int main() {

    pageRank();

    return 0;

}
void pageRank () {
    // Open File
    char *rootFileName = "collection.txt";
////////////////////////////////////////////////////////////////////////
    int nV = getNumberOfVertices(rootFileName);
    char **URLs = arrayOfURLs(rootFileName, nV);
////////////////////////////////////////////////////////////////////////
    // Initialise an empty queue and graph
    Graph g = newGraph((size_t)nV);
    insertURLNames(g, URLs);
/////////////////////////////////////////////////////////////////////////
    g = generateGraph(g, rootFileName, URLs);
    printf("Success in generarting graph\n\n");




    

}





// Generate a graph with 0 weight according to the 
// edges in the files
Graph generateGraph(Graph g, char* rootFileName, char **URL) {
    
    // Set buffer to perform operations on files
    char inCollection[BUFSIZE];
    char inUrl[BUFSIZE];
    char lineBUF[1000];
 
    char *startStr = "#start section-1\n";

    int fromURL;
    int toURL;

    FILE *collectionFile = fopen(rootFileName, "r");
    if (collectionFile) {
        // read the words in the root file per string
 

        while (fscanf(collectionFile, "%s", inCollection) != EOF) {
            
            printf("\n success entering the collection file\n");

            char *urlName = strdup(inCollection);
            

            // add ".txt" to the end of the files
            strcat(inCollection, ".txt");    
            
            FILE *urlFile = fopen(inCollection, "r");
            
            if (urlFile) {
                printf("\n success entering the URL file\n\n");
            
                // normalise and then strcmp
                while (normaliseWord(fgets(lineBUF, 1000, urlFile))) {
                    
                    if (strcmp(lineBUF, startStr) == 0) {
                        printf("Found the nodes to connect\n");
                        break;
                    }
                }

                printf("Success scanning til #start section-1\n\n");

                // strcmp
                while (fscanf(urlFile, "%s", inUrl )&& (strcmp(inUrl, "#end") != 0)) {
                    int j;
                    for (j = 0; strcmp(URL[j], urlName) != 0; j ++) {}                    
                    fromURL = j;

                    for (j = 0; strcmp(URL[j], inUrl) != 0; j ++) {}
                    toURL = j;

                    if (fromURL != toURL) {
                        insertEdge(g, fromURL, toURL, 1);
                    } 
                }
                fclose(urlFile);
            }

        }
        fclose(collectionFile);
    }    

    setInLinksOutlinks(g);
    setW_Out (g);
    setW_in (g);

  //  showGraph(g, URL);

    printf("\n\n");
    printMatrix(g);

    calculatePageRank(g, 0.85, 0.00001, 1000);

    printf("\n\n");


    


    return g;

}


// Creates an array of the vertices;
// which are the URLs in the root File
// Assuming all URL names are different
char **arrayOfURLs(char *rootFileName, int nV) {

   char inCollection[BUFSIZE];


    // Initialise an array of strings to store the name of URLs
    char **url = malloc(sizeof(char *) * nV);
    int i = 0;
    // fill the url array with vertices
    FILE *collectionFile = fopen(rootFileName, "r");
    if (collectionFile) {
        while (fscanf(collectionFile, "%s", inCollection) != EOF) {
            // url[i] = malloc(sizeof(char) * strlen(inCollection));
            url[i] = strdup(inCollection);
            i ++;
        }
        fclose(collectionFile);
    }

    printf("Success in creating array of URLs\n"); 
    for (i = 0; i < nV; i ++) printf("[%d]--%s\n", i, url[i]);
    
    return url;
}


// Gets the total number of vertices, which is the 
// total number of fileNames to open
// Assuming all URL names are different
int getNumberOfVertices(char *rootFileName) {
   char inCollection[BUFSIZE];

    FILE *collectionFile = fopen(rootFileName, "r");
    // Initalise the number of vertices to 0 
    // This is needed to initialise the graph
    int nV = 0; 
    // Calculate the total number of vertices in a graph
    if (collectionFile) {
        while (fscanf(collectionFile, "%s", inCollection) != EOF) nV ++;

        fclose(collectionFile);
    }
    printf("\nSuccess in computing the number of vertices\n");
    printf("Total number of vertices: %d\n", nV);
    return nV;
}






// Normalise the words passed to the function follwoing the required properties
// Assime that the string is already 'malloc'-ed and strCpy-ed
char *normaliseWord (char *str) {

    // if empty string
    if (strlen(str) == 0) return str;

    // Remove white spaces in left of the string
    while (isspace(*str)) str ++;
    
    // Remove while spaces on the right of the string
    int c = strlen(str) - 1;
    while (str[c] == ' ') {
        str[c] = '\0' ;
        c--;
    }
     
    // total length of the string
    int len = strlen(str) - 1;
    // if the string ends in special characters
    if (str[len] == '.' || str[len] == ',' ||
        str[len] == ';' || str[len] == '?') {
        str[len] = '\0';
    }
    // change the string to all lowercase
    int i = 0;
    while (str[i] != '\0') {
        str[i] = tolower(str[i]);
        i ++;
    }    

    return str;
}
//////////////////////////////////////////////////////////////////////////////












